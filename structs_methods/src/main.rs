#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    //methods always have a `&self` reference as the first parameter
    //shorthand for `self: &Self`; scoped within the `impl` block
    fn area(&self) -> u32 {
        self.width * self.height
    }
    
    //we can set a method with the same name as one of the struct's field
    //because we'll be using parentheses to call it.
    fn width(&self) -> bool {
        self.width > 0
    }
    
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
    
    //ASSOCIATED FUNCTIONS
    //they don't take `self` as a parameter
    //do not need an instance of the type to work with, but rather return an instance
    //the `Self` is an alias for the type that appears after the `impl` keyword
    //String::from('hello world)
    //Rectangle::square()
    fn square(size: u32) -> Self {
        Self {
            width: size,
            height: size,
        }
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    
    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };
    
    println!(
        //instanced,dot, method name, (parentheses and any arguments)
        "The area of the rectangle is {} square pixels", rect1.area()
    );
    
    //Rust know how to distinguish between a field and a method with the same name
    println!("rect is {:?}", &rect1.width); //no parentheses - field
    
    // with parentheses - method
    // how beautiful is this way of checking a bool?
    if rect1.width() {
        println!("rect1 has a width");
    }
    //we borrow a reference as we only need to read, we're not mutating the value;
    println!("Can rect1 hold rect2? : {}", rect1.can_hold(&rect2));
    println!("Can rect2 hold rect3?: {}", rect2.can_hold(&rect3));
    
    
    //ASSOCIATED FUNCTIONS
    let square = Rectangle::square(5);
    println!("A square generated by an associated function Rectangle::square(5) : {:#?}", square);
}
